{"meta":{"title":"gowork的博客","subtitle":"gowork 的博客","description":"gowork在技术学习及使用过程中的一些积累","author":"gowork","url":"http://www.gowork.top"},"pages":[{"title":"gowork","date":"2017-11-02T09:16:28.000Z","updated":"2017-11-02T09:16:28.000Z","comments":true,"path":"about/index.html","permalink":"http://www.gowork.top/about/index.html","excerpt":"","text":"08年就读于三峡大学本科，12年毕业来到上海工作至今。 本科是数学与应用数学专业，毕业后一直从事软件开发工作，主要使用java进行开发，对java常用的框架struts2、spring、mybatis、springboot都比较熟悉；前端开发也有所认识比如bootstrap、vue等；曾经跟同事修复过c#相关软件的bug，所以桌面开发也有所了解。"},{"title":"分类","date":"2017-11-02T08:49:00.000Z","updated":"2017-11-02T08:49:00.000Z","comments":false,"path":"categories/index.html","permalink":"http://www.gowork.top/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-11-02T08:49:17.000Z","updated":"2017-11-02T08:49:17.000Z","comments":true,"path":"tags/index.html","permalink":"http://www.gowork.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"django初识","slug":"hello-django","date":"2017-11-16T13:23:20.000Z","updated":"2017-11-17T10:30:21.000Z","comments":true,"path":"hello-django/","link":"","permalink":"http://www.gowork.top/hello-django/","excerpt":"Python下有许多款不同的 Web 框架。Django是重量级选手中最有代表性的一位。许多成功的网站和APP都基于Django。 Django是一个开放源代码的Web应用框架，由Python写成。 Django遵守BSD版权，初次发布于2005年7月, 并于2008年9月发布了第一个正式版本1.0 。 Django采用了MVC的软件设计模式，即模型M，视图V和控制器C。","text":"Python下有许多款不同的 Web 框架。Django是重量级选手中最有代表性的一位。许多成功的网站和APP都基于Django。 Django是一个开放源代码的Web应用框架，由Python写成。 Django遵守BSD版权，初次发布于2005年7月, 并于2008年9月发布了第一个正式版本1.0 。 Django采用了MVC的软件设计模式，即模型M，视图V和控制器C。 djangodjango的目录结构12345678910111213projectName projectName __init__.py settings.py urls.py apps app1 app2 log media static templates manage.py 常见命令 新建 project 1django-admin.py startproject project_name 新建 app 12python manage.py startapp app_name或 django-admin.py startapp app_name 将多个app放在同一个apps文件夹中，这样会比较清楚规范 项目右键new–&gt;python package-&gt;apps apps的文件夹右击–&gt;选择mark directory as—&gt;选择sources root-&gt;点击run 在setting.py中添加设置 sys.path.insert(0,os.path.join(BASE_DIR,&#39;apps&#39;)) 创建数据库表 1234# 1. 创建更改的文件python manage.py makemigrations# 2. 将生成的py文件应用到数据库python manage.py migrate 创建超级管理员 1234python manage.py createsuperuser# 用户名和密码必填# 修改 用户密码可以用：python manage.py changepassword username 导出数据 导入数据 12python manage.py dumpdata appname &gt; appname.jsonpython manage.py loaddata appname.json Django 项目环境终端 1python manage.py shell 与直接使用python进入shelld的区别是你可以在这个 shell 里面调用当前项目的 models.py 中的 API 数据库命令行 1python manage.py dbshell 更多命令 1终端输入 python manage.py 可以看到详细的列表 django 语言支持1.7之前，需要设置LANGUAGE_CODE = &#39;zh_CN&#39;在1.7以上，django的中文需要设置LANGUAGE_CODE = &#39;zh_Hans&#39; django 模块 xadmin 后台管理系统的界面需要添加django_crispy_forms不然会报错 ‘django_captcha’, # 验证码 ‘django_pure_pagination’, # 分页 django ORM 获取models中choices的显示，可以在页面中这样取值object.get_fieldname_display来获取 举个🌰： 12class Course(models.Model): degree = models.CharField(max_length=10, choices=(('junior', '初级'), ('middle', '中级'), ('senior', '高级')), verbose_name='课程等级') 1&#123;&#123;course.get_degree_display&#125;&#125; 反向获取参考外键的数据，可以使用_set.all()来获取 举个🌰： 12345678910111213class Course(models.Model): \"\"\"课程 \"\"\" ... def get_zj_nums(self): return self.lesson_set.all().count()class Lesson(models.Model): \"\"\"课程章节 \"\"“ course = models.ForeignKey(Course, verbose_name='课程') ... 判断用户是否登录 1request.user.is_authenticated() 页面url， url 'course:list' course.id%&#125; ```12345678910111213141516171819205. django 的form表单验证6. ajax请求 在js中写下如下内容，django默认有csrf验证，所以下面代码需要添加在html中 ```javascript $.ajax(&#123; cache:false, type:&apos;POST&apos;, url:&apos;&apos;, data:&#123;&#125;, async:true, beforeSend:function(xhr,settings)&#123; xhr.setRequestHeader(’X-CSRFToken‘,&apos;&#123;&#123;csrf_token&#125;&#125;&apos;); &#125;, success:function(data)&#123; &#125; &#125;) python后台中 12from django.http import HttpResponsereturn HttpResponse(&apos;jsonStr&apos;,content_type=&apos;application/json&apos;) 上传文件的地址media 在settings.py中设置 123ME DIA_URL = &apos;/media/&apos;MEDIA_ROOT = os.path.join(BASE_DIR,&apos;media&apos;) 然后在html中引用 1&lt;img src=&quot;&#123;&#123;MEDIA_URL&#125;&#125;&#123;&#123;course.img&#125;&#125;&quot;&gt; 过滤包含外键id的值 可以用_来连接外键的字段，__来连接使用ORM方法 举个🌰： 12user_ids = [user_course.user.id for user_course in user_courses]all_user_courses = UserCourse.object.filter(user_id__in=user_ids) 数据迁移 123makemigrations 将数据模型变更制作一个迁移migrate 执行迁移sqlmigrate 展示迁移的SQL语句 数据模型 12345678class OfficialUrl(models.Model): createTime = models.DateTimeField(auto_now_add=True) url = models.CharField(max_length=500, null=True, blank=True) class Meta: verbose_name = &apos;官方地址&apos; verbose_name_ plural = verbose_name db_table = &apos;official_url&apos; verbose_name_plural是后台设置时显示的复数 查询 User.objects.all() User.objects.filter(name=’’, age=’’) 取出一条 12if all_message: message = all_messages[0] 保存 save() 123user = User()user.name = &apos;张三&apos;user.save() 删除 delete() django view 处理请求的两种方式 函数处理请求 在urls.py中写入 在views.py中写入 class处理请求 在urls.py中写入 12345678# _*_ coding: UTF-8 _*_from django.conf.urls import urlimport viewsurlpatterns = [ url(r&apos;^list$&apos;, views.CourseListView.as_view(), name=&apos;course_list&apos;)] 在views.py中写入 登录权限验证的view 不用class的情况下，方法加上装饰器@login_required即可，但是在使用class创建view的情况下，需要使用到继承来处理这种情况，先创建登录权限类 12345678910# _*_ coding: UTF-8 _*_from django.contrib.auth.decorators import login_requiredfrom django.utils.decorators import method_decoratorclass LoginRequiredMixin(object): @method_decorator(login_required(login_url='/login/')) def dispatch(self, request, *args, **kwargs): return super(LoginRequiredMixin, self).dispatch(request, *args, **kwargs) 然后在view中继承 12class CourseAddView(LoginRequiredMixin, View): ... django虚拟环境virtualenv与virtualenvwrapper 虚拟virtualenv 与virtualenvwrapper 创建虚拟环境 1mkvirtualenv 虚拟环境目录 创建完成后自动进入虚拟环境 退出虚拟环境 1deactivate 查看已经建立的虚拟环境 1workon 进入某个虚拟环境 1workon 虚拟环境目录 虚拟环境添加包 进入虚拟环境后使用pip进行操作，操作方法参照pip命令 ​ 使用pyenv及pyenv-virtualenvwrapper 安装pyenv及pyenv-virtualenvwrapper 命令行执行 1brew install pyenv 、brew install pyenv-virtualenv 安装完在~目录下的.bash_profile文件加上以下内容 123export PYENV_ROOT=/usr/local/var/pyenvif which pyenv &gt; /dev/null; then eval &quot;$(pyenv init -)&quot;; fiif which pyenv-virtualenv-init &gt; /dev/null; then eval &quot;$(pyenv virtualenv-init -)&quot;; fi 说明：PYENV_ROOT为pyenv的环境目录 可自行创建目录 pyenv的使用 12345pyenv versions：查看当前pyenv下的所有python版本.pyenv install --list：列出所有可以下载的python版本.pyenv install 版本号：下载并安装python版本，eg：python install 2.7.12，版本号可根据上一条命令获取.python global 版本号：切换当前默认的python版本，全局有效.python local 版本号：切换当前默认的python版本，当前用户有效. pyenv-virtualenv的使用 1234pyenv virtualenv 2.7.12 python2_7_12：创建名为python2_7_12的虚拟环境，对应的版本为2.7.12pyenv activate python2_7_12：切换到python2_7_12虚拟环境pyenv deactivate：退回系统环境pyenv virtualenvs 显示所有虚拟环境 django 静态文件处理1234STATIC_URL = &apos;/static/&apos; # 访问静态urlSTATICFILES_DIRS = ( # 静态文件夹 os.path.join(BASE_DIR, &apos;static&apos;),) django xadmin 后台管理显示app中文 在每个app的apps.py的class后加入 verbose_name=&#39;中文app名&#39; 在__init__.py文件中加入default_app_config = &#39;&lt;app packagename&gt;.apps.&lt;app&gt;Config&#39; 常见问题 使用from django.views.generic import View创建post方法时怎么略过csrf_token验证 解决办法： 在class上加注解@method_decorator(csrf_exempt, name=’dispatch’) 怎么获取页面上POST上来的数组 request.POST.getlist(‘ids[]’, []),不要忘记[]","categories":[{"name":"框架","slug":"framework","permalink":"http://www.gowork.top/categories/framework/"}],"tags":[{"name":"django","slug":"django","permalink":"http://www.gowork.top/tags/django/"}]},{"title":"hello-vue-cli","slug":"hello-vue-cli","date":"2017-11-15T13:23:20.000Z","updated":"2017-11-18T16:25:50.000Z","comments":true,"path":"hello-vue-cli/","link":"","permalink":"http://www.gowork.top/hello-vue-cli/","excerpt":"","text":"vue-cli 创建单页面应用安装使用vue-cli创建项目项目结构单页面应用的项目必要三文件： 一个html文件：index.html 一个webpack打包时的文件：main.js 一个vue根组件，作为其他组件的挂载点：App.vue 使用vue-router 作为路由","categories":[{"name":"工具","slug":"tools","permalink":"http://www.gowork.top/categories/tools/"}],"tags":[{"name":"vue-cli","slug":"vue-cli","permalink":"http://www.gowork.top/tags/vue-cli/"}]},{"title":"在阿里云上安装配置shadowsocks","slug":"hello-shadowsocks","date":"2017-10-31T13:44:26.000Z","updated":"2017-11-02T08:50:34.000Z","comments":true,"path":"hello-shadowsocks/","link":"","permalink":"http://www.gowork.top/hello-shadowsocks/","excerpt":"防火墙日渐增强的，访问国外的技术性网站及google搜索越来越难，使用他人的shadowsocks，不仅贵而且网速不稳定，时不时地被封，所以就萌生了创建自己的shadowsocks服务器的想法。 最近（2017年10月）好像阿里云香港站的服务器搭建shadowsocks好像不能访问了，美国的服务器距离太远，选择亚洲的服务器是首选，东京的太贵，马来西亚的刚开好像也很贵，最近双十一新加坡的降价很多（由于观望了两天，比前几天贵了30），遂速度入手。","text":"防火墙日渐增强的，访问国外的技术性网站及google搜索越来越难，使用他人的shadowsocks，不仅贵而且网速不稳定，时不时地被封，所以就萌生了创建自己的shadowsocks服务器的想法。 最近（2017年10月）好像阿里云香港站的服务器搭建shadowsocks好像不能访问了，美国的服务器距离太远，选择亚洲的服务器是首选，东京的太贵，马来西亚的刚开好像也很贵，最近双十一新加坡的降价很多（由于观望了两天，比前几天贵了30），遂速度入手。 安装shadowsocks服务器12345# 安装pipyum install python-pip# 使用pip安装shadowsockspip install shadowsocks 配置Shdowsocks服务,并启动新建 /etc/shadowsocks.json 文件 1vi /etc/shadowsocks.json 根据情况填入内容如下： 单端口： 123456789&#123; \"server\":\"0.0.0.0\", --服务器IP，直接用0.0.0.0也可 \"server_port\":1080, --端口端口 \"local_address\": \"127.0.0.1\", --本地地址，可省略 \"local_port\":1080, --本地端口，可省略 \"password\":\"password\", --密码 \"timeout\":300, --超时时间，可省略 \"method\":\"aes-256-cfb\", --加密策略，有多重策略，具体自查&#125; ​ 多端口： 12345678910111213&#123; \"server\":\"0.0.0.0\", \"local_address\":\"127.0.0.1\", \"local_port\":1080, \"port_password\":&#123; --每个端口对应一个密码 \"1111\":\"password1\", \"1112\":\"password2\", \"1113\":\"password3\" &#125;, \"timeout\":300, \"method\":\"aes-256-cfb\", \"fast_open\":false&#125; 启动shadowsocks1ssserver -c /etc/shadowsocks.json -d start 安装shadowsocks客户端 mac、windows 安装地址 https://sourceforge.net/projects/shadowsocksgui android 安装地址： https://github.com/shadowsocks/shadowsocks-android 客户端配置菜单 -&gt; 服务器-&gt; 打开服务器设定 -&gt; 点击+进行添加服务器配置","categories":[{"name":"工具","slug":"tools","permalink":"http://www.gowork.top/categories/tools/"}],"tags":[{"name":"shadowsocks","slug":"shadowsocks","permalink":"http://www.gowork.top/tags/shadowsocks/"}]},{"title":"使用hexo框架创建个人博客","slug":"hello-hexo","date":"2017-10-31T07:45:11.000Z","updated":"2017-11-02T08:50:34.000Z","comments":true,"path":"hello-hexo/","link":"","permalink":"http://www.gowork.top/hello-hexo/","excerpt":"在各种博客上面写过文章，像CSDN、开源中国等，编辑器使用很不习惯，页面展示的样式也不是很好看，遂有了自己搭建个人博客的想法，google之后，发现hexo是一个不错的选择！","text":"在各种博客上面写过文章，像CSDN、开源中国等，编辑器使用很不习惯，页面展示的样式也不是很好看，遂有了自己搭建个人博客的想法，google之后，发现hexo是一个不错的选择！ 什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装###安装前提 安装node crul安装 1curl https://raw.github.com/creationix/nvm/master/install.sh | sh Wget: 1wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh nvm安装node 1nvm install stable ​ 安装git Windows：下载并安装 git. Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。 Linux (Ubuntu, Debian)：sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core 安装hexo1npm install -g hexo-cli 建站安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件 123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 执行完以上程序后，生成的目录如下： 1234567├── _config.yml # 网站的配置信息大部分都在这里├── package.json # 应用程序的信息├── scaffolds # 模板文件夹 应用程序会根据模板创建文件├── source # 用户资源文件，除_posts文件夹下的文件外其他文件夹的内容直接复制过去| ├── _drafts| └── _posts # 资源文件，文章就在此文件夹下└── themes # 主题文件夹，此文件夹下的每个目录是一个主题，会根据配置文件生成静态文件","categories":[{"name":"工具","slug":"tools","permalink":"http://www.gowork.top/categories/tools/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.gowork.top/tags/hexo/"},{"name":"博客","slug":"blog","permalink":"http://www.gowork.top/tags/blog/"}]},{"title":"centos上创建git服务器","slug":"hello-git-repository","date":"2017-10-21T07:47:26.000Z","updated":"2017-11-02T09:01:27.000Z","comments":true,"path":"hello-git-repository/","link":"","permalink":"http://www.gowork.top/hello-git-repository/","excerpt":"一般开源的项目都会放在github上，私人的项目会放在开源中国的码云上，但是公司的项目还是放在自己服务器上比较稳妥，遂有了这篇自建git服务器的文章。","text":"一般开源的项目都会放在github上，私人的项目会放在开源中国的码云上，但是公司的项目还是放在自己服务器上比较稳妥，遂有了这篇自建git服务器的文章。 前要：此教程是在centos上创建git服务器 安装git1yum install git 创建git组及git用户123groupadd gitadduser git -g gitpasswd git &lt;password&gt; 将上面的修改为自己的密码为了安全起见，需要禁止git用户使用ssh登录，进行如下操作：在 /etc/passwd文件中，将git:x:&lt;id&gt;:&lt;id&gt;::/home/git:/bin/bash修改为git:x:&lt;id&gt;:&lt;id&gt;::/home/git:/sbin/nologin 创建证书登录收集所有需要登录git的用户公钥，公钥存放于用户的~/.ssh/id_rsa.pub文件上，打开此文件将每个人的公钥导入到git服务器的/home/git/.ssh/authorized_keys文件上 123mkdir .ssh cd .sshvi authorized_keys 使用vim将公钥导入到以上文件中 初始化git仓库在此将git用户根目录作为git仓库，先进入git用户根目录，创建一个空仓库，服务器上的git仓库通常以.git结尾 1git init --bare &lt;projectname&gt;.git 然后把仓库所属用户改为git 1chown -R git:git &lt;projectname&gt;.git 本地操作仓库clone到本地机型操作 1git clone git@&lt;ip&gt;:/home/git/&lt;projectname&gt;.git","categories":[{"name":"工具","slug":"tools","permalink":"http://www.gowork.top/categories/tools/"}],"tags":[{"name":"git","slug":"git","permalink":"http://www.gowork.top/tags/git/"}]}]}